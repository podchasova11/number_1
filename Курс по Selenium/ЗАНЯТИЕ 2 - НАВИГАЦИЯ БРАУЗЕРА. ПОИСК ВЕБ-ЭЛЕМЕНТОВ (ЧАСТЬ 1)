Управление навигацией браузера
Открытие страницы
Первое, что вы захотите сделать после того как запустите браузер, это открыть сайт. Это можно сделать используя метод get():
driver.get("https://example.ru")
Переход назад по странице
Часто нажав не туда или просто для удобства, мы используем кнопку "Назад" в браузере. Это та самая стрелочка влево ◀️ около адресной строки браузера. Для того чтобы совершить нажатие нам понадобиться метод back().
driver.back()
Переход вперед по странице
В данном случае ситуация аналогична переходу "Назад" по странице, только в этом случае переход по странице совершается вперед. Для этого нам необходимо использовать метод forward().
driver.forward()
Перезагрузка страницы
Очень и очень часто во время работы или простого серфинга сайтов, мы используем кнопку для обновления страницы. Для того чтобы обновить страницу используя Selenium нужно использовать метод refresh().
driver.refresh()


Спящий код
Зачастую для проверки каких-то вещей руками, нужно притормозить код, чтобы успеть сделать действия в браузере руками. Для таких целей необходимо импортировать модуль time и его метод time.sleep().
import time

time.sleep(5) # В качестве аргумента принимает кол-во секнуд для паузы


Что такое WebElement
Поиск элементов на странице будет занимать немалую часть времени всего процесса автоматизации, поэтому этой теме нужно уделить особое внимание.

Начнем с определения того, что такое элемент с точки зрения автоматизации и с точки зрения самого Selenium.

WebElement - это любой объект на странице, такой как кнопка, поле ввода и т.д. Для Selenium же, это объект, который имеет тип: WebElement (нужно просто это понимать).


Поиск веб-элементов. Часть 1
Существует множество способов поиска элементов на странице, мы рассмотрим самые удобные и эффективные.

Первое что стоит изучить, это принцип поиска по простейшим атрибутам, возьмем к примеру:

ID
CLASS_NAME
TAG_NAME

Для начала работы, нам необходимо импортировать новый для нас модуль By
from selenium.webdriver.common.by import By
Отлично, теперь мы готовы к свершениям и в первую очередь научимся искать один веб-элемент.
Поиск одного элемента
Для поиска одного элемента, у обьекта driver есть специальный метод find_element().

Аргументы метода:
Способ поиска - например, используя наш новый модуль By: By.ID
Значение атрибута - указывается значение атрибута в соотвествии со способом поиска

Разберем пример, при котором мы ищем ниже описанное поле ввода input:
<input id=”login_field” class="login"/>
Посмотрим на несколько примеров поиска по ранее упомянутым атрибутам
driver.find_element(By.ID, "login_field") # Поиск по id атрибуту

driver.find_element(By.CLASS_NAME, "login") # Поиск по имени класса

driver.find_element(By.TAG_NAME, "input") # Поиск по имени тега
Но что же вернет мне результат поиска элемента?
Ранее мы познакомились с таким обьектом как WebElement, давайте посмотрим как он выглядит.

Для начала выполним простой код для поиска элемента:
driver.get("https://testautomationpractice.blogspot.com") # Откроем тестовую страницу

ELEMENT = driver.find_element(By.ID, "Wikipedia1_wikipedia-search-input")

print(ELEMENT)
В результате вывода мы получим следующую картину:
<selenium.webdriver.remote.webelement.WebElement (session="7285b48ff604d43b1e6c42166802cd00", element="e56e1acc-e470-4463-b76f-46e8b20b69a7")>
Вот таким образом и выглядит наш обьект с типом WebElement


Поиск элементов без By
Ранее мы использовали стандартные методы, затем научились использовать пакет By, но существует еще один способ, как по мне, он максимальной прост, понятен и удобен.

Тут все просто, сразу приведу пример:
driver.find_element("id", "login_field")
То есть вместо пакета By, мы используем текстовые значения и нет необходимости делать какие либо дополнительные импорты.

Список обозначений для использования вместо By:
ID = "id"
XPATH = "xpath"
LINK_TEXT = "link text"
PARTIAL_LINK_TEXT = "partial link text"
NAME = "name"
TAG_NAME = "tag name"
CLASS_NAME = "class name"
CSS_SELECTOR = "css selector"


Поиск элементов без By
Основываясь на изученном ранее поиске элементов давайте научимся самому важному способам манипуляции с веб-элементами, клику!

Клик на элемент применяется непосредственно к найденному элементу страницы и имеет специальный метод click()
SEARCH_BUTTON = driver.find_element(By.CLASS_NAME, "class") # Поиск элемента

SEARCH_BUTTON.click() # Клик по элементу


ПРАКТИЧЕСКОЕ ЗАДАНИЕ
Домашнее задание
Домашнее задание на тему "Навигация и поиск элементов"

Задание 1
На странице https://testautomationpractice.blogspot.com/

Найти иконку Wikipedia по имени класса
Найти поле ввода Wikipedia по id
Найти кнопку поиска Wikipedia по классу
Найти любой другой элемент на странице по тегу
