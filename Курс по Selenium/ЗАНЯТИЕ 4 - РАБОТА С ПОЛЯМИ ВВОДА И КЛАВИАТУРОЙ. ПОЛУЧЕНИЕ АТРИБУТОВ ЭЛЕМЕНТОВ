ЗАНЯТИЕ 4 - РАБОТА С ПОЛЯМИ ВВОДА И КЛАВИАТУРОЙ. ПОЛУЧЕНИЕ АТРИБУТОВ ЭЛЕМЕНТОВ
Запись занятия
Получение состояний элементов
Ввод данных в поля ввода
Получение атрибутов полей ввода и других элементов
Очистка полей ввода
Работа с клавиатурой
Копирование и вставка
Тренажеры


Получение состояний элементов
Мы часто видим, что элементы страницы могут быть выключены/недоступны для взаимодействия, а могут быть доступными, могут не отображаться, а могут отображаться и т.д.

Вы можете встретить такие состояния при заполнении форм, при регистрациях, при принятии соглашений и прочего.

Ниже привел простой пример enabled и disabled элементов:


Зачастую нам необходимо убедиться в смене статуса элемента для дальнейшего взаимодействия с ним. Для этого есть специальные методы:

is_enabled() - позволяет проверить, что элемент доступен для взаимодействия, т.е включен. Метод возвращает значение True, если элемент enabled, и False, если элемент disabled.

is_displayed() - позволяет проверить, отображается ли элемент на веб-странице или скрыт (невидим) в данный момент. Этот метод возвращает значение True, если элемент отображается, и False, если элемент скрыт.

Метод is_displayed() в Selenium используется для проверки видимости элемента на веб-странице. Этот метод вернет False в следующих случаях:

Элемент скрыт: Если элемент скрыт с помощью CSS-свойств, таких как display: none или visibility: hidden, метод is_displayed() вернет False.
Элемент вне видимой области: Если элемент находится вне видимой области страницы (например, имеет отрицательные координаты), is_displayed() также может вернуть False.
Элемент имеет нулевую высоту или ширину: Если элемент имеет высоту и/или ширину равную 0, он будет считаться невидимым, и is_displayed() вернет False.
Элемент скрыт за другим элементом: В некоторых случаях, если элемент полностью перекрыт другим элементом, is_displayed() также может вернуть False.
Элемент не в DOM: Если элемент был удален из DOM или еще не добавлен к нему, то метод is_displayed() выдаст исключение NoSuchElementException.
Элемент на свернутом блоке или в неактивном табе: Если элемент находится в свернутом блоке (например, внутри <details> тега, который не раскрыт) или на неактивной вкладке, is_displayed() также вернет False.

Тема простая и почти всегда можно обойтись явными ожиданиями.


Ввод данных в поля ввода
На самом деле сами того не замечая, мы вводим данные в текстовые поля десятки, а то и сотни раз в день. Для такой простой и часто используемой операции существует метод send_keys()

К тестовым полям можно отнести теги <input/> и <textarea>

Существует два способа ввода текста, через переменную и напрямую .

Способ 1 - Ввод данных напрямую
# Ищем текстовое поле и вписываем туда текст
driver.find_element("xpath", "//input[@id='email']").send_keys("ваш email")
В данном способе используя точку, мы применяем метод send_keys() сразу к найденному элементу
Способ 2 - Ввод данных через переменную
# Записываем найденный элемент (text box) в переменную 
email_field = driver.find_element("xpath", "//input[@id='email']")

# Обращаясь к переменной с найденным элементом вызываем метод send_keys()
email_field.send_keys("ваш email")
В этом же способе записывая элемент в переменную мы применяем к нему метод send_keys()

Способ 1 хорош, но более правильным и удобным способом будет занесение элемента в переменную, т.е Способ 2. В дальнейшем мы с вами с этом убедимся.


Получение атрибутов полей ввода и других элементов
В процессе работы Вам часто придётся проверять и сравнивать значения из различных полей. Для таких целей используется метод get_attribute(“value”)

Давайте усовершенствуем процесс ввода логина в поле email и проверим значение в поле после ввода логина

Алгоритм:
Найдём элемент поля ввода
Убедимся что поле пустое
Введём логин
Проверим что в поле email действительно введён логин
# Записываем найденный элемент (text box) в переменную 
email_field = driver.find_element("xpath", "//input[@id='email']")

# Проверяем, что в поле пусто
assert email_field.get_attribute("value") == ""

# Вводим логин в поле email
email_field.send_keys("example@yandex.ru")

# Записываем значение поля в переменную
email_field_value = email_field.get_attribute("value")

# Проверяем, что в поле email содержится введенный логин
assert "example@yandex.ru" in email_field_value
На самом деле, вы можете получить любой атрибут у любого элемента с помощью метода get_attribute()

Давайте рассмотрим простой пример с ссылкой ниже
<a href="/study-plan" class="nav-link" target="_self" data-component-name="BLink">Study plan</a>
Теперь по очереди получим все ее атрибуты, чтобы закрепить материал
MY_LINK = driver.find_element("xpath", "//a[text()='Study plan']")

print(MY_LINK.get_attribute("href"))

print(MY_LINK.get_attribute("class"))

print(MY_LINK.get_attribute("target"))

print(MY_LINK.get_attribute("data-component-name"))
Таким образом будут напечатаны все значения всех выбранных атрибутов.



Очистка полей ввода
Бывают моменты, когда в поле ввода уже есть значение, давайте рассмотрим такой случай на примере профиля.

На данном скриншоте мы видим стандартный профиль пользователя, который открыл его для того чтобы сменить Имя или Фамилию.

Давайте попробуем использовать уже знакомый нам метод send_keys() чтобы изменить поле Имени.
# Тут мы нашли поле ввода First Name и ввели новое новое значение 'Alexey'
driver.find_element("xpath", "//input[@id='first-name']").send_keys("Alexey")
В результате выполнения, мы бы получили следующую картину

Первоначальное значение в поле First Name слилось с новым введенным нами значением, причиной является то, что метод send_keys() не обращает внимание на то, пустое поле или нет.

Чтобы избежать таких ситуаций, нам нужно использовать метод clear() перед тем как вносить новые значение используя send_keys().
# Заносим найденное поле First Name в переменную для удобства
first_name = driver.find_element("xpath", "//input[@id='first-name']")

# Очищаем поле First Name
first_name.clear()
В результате мы получим очищенное поле First Name

Давайте теперь напишем полноценный сценарий смены First Name
# Заносим найденное поле First Name в переменную для удобства
first_name = driver.find_element("xpath", "//input[@id='first-name']")

# Очищаем поле First Name
first_name.clear()

# Проверяем, что в поле пусто
assert first_name.get_attribute("value") == ""

# Вводим новое значение в поле First Name
first_name.send_keys("Alexey")

# Проверяем что в поле First Name содержится введенное нами значение "Alexey"
assert "Alexey" in first_name.get_attribute("value")
В результате мы получим следующую картину:

Данный метод очень важен, так как не редко может привести к ошибкам и некорректной работе тестов при автоматизации.



Работа с клавиатурой
Данная тема важная, но очень простая, так как работа идет через уже известный нам метод send_keys().

Ранее мы научились вводить текст с помощью этого метода, и нам ничего не требовалось, в случае же с непосредственно передачей нажатий клавиш или их сочетаний, нам потребуется импортировать модуль Keys
from selenium.webdriver import Keys
Синтаксис максимально прост:
Нажатие клавиши - пример: Keys.ENTER
Сочетание клавиш - пример: Keys.CONTROL + “A”

Теперь можно экспериментировать с нажатием клавиш и их сочетаний! Давайте реализуем следующий алгоритм:

Вводим текст
Выделяем его через Ctrl + A (Windows) или Command + A (Mac OS)
Удаляем текст через Backspace

Для практики будем использовать данный сайт http://the-internet.herokuapp.com/key_presses
driver.get("http://the-internet.herokuapp.com/key_presses") # Сайт для работы

KEY_PRESS_INPUT = ("xpath", "//input[@id='target']") # Поле ввода

driver.find_element(*KEY_PRESS_INPUT).send_keys("Hello World") # Ввод текста

driver.find_element(*KEY_PRESS_INPUT).send_keys(Keys.COMMAND + "A") # Выделение всего текста

driver.find_element(*KEY_PRESS_INPUT).send_keys(Keys.BACKSPACE) # Удаление выделенного текста
Так же на этом сайте, можно попробовать нажать любые клавиши, стрелки, f-кнопки и т.д.

Важно: Чтобы избежать ошибок из-за разницы систем с CONTROL и COMMAND можно написать следующий код, создав универсальную клавишу CMD_CTRL.

При ее использование будет проверятся система на которой запускается код, и в соответствии с этим будет вызываться либо CONTROL, либо СOMMAND.
import platform

os_name = platform.system()
CMD_CTRL = Keys.COMMAND if os_name == "Darwin" else Keys.CONTROL

driver = webdriver.Chrome()
driver.find_element().send_keys(CMD_CTRL + "A") # Использование




Копирование и вставка
Очень редкое явление в автоматизации, но тем не менее, одним из способов реализации является как раз таки использование Keys.
driver.get("https://clipboardjs.com/")

COPY_LOCATOR = ("xpath", "//button[@data-clipboard-target='#bar']")
PASTE_LOCATOR = ("xpath", "//textarea[@id='bar']")

COPY = driver.find_element(*COPY_LOCATOR)
PASTE = driver.find_element(*PASTE_LOCATOR)

PASTE.send_keys(cmd_ctrl + "A") # Выделим все внутри поля
time.sleep(2)
PASTE.send_keys(cmd_ctrl + "X") # Вырежем весь текст
time.sleep(2)
PASTE.send_keys(cmd_ctrl + "V") # Вставим весь текст



Тренажеры
Форма - https://demoqa.com/automation-practice-form
Клавиатура - http://the-internet.herokuapp.com/key_presses?
Клипборд - https://clipboardjs.com/



ПРАКТИЧЕСКОЕ ЗАДАНИЕ
Домашнее задание
Домашнее задание на тему "Работа с полями ввода и клавиатурой"

Задание 1
Заполнить все текстовые поля данными (почистить поля перед заполнением).
Проверить, что данные действительно введены, используя get_attribute() и assert.
Страница для выполнения задания: https://demoqa.com/text-box

Задание 2
Прокликать все ссылки со статус-кодами на странице, используя алгоритм перебора элементов.
После каждого клика возвращаться на стартовую страницу.
Страница для выполнения задания: http://the-internet.herokuapp.com/status_codes

